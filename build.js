/**
 * ‰∫ë‰∫ëÊòüÁæΩÁΩëÁªúÁßëÊäÄÂ∑•‰ΩúÂÆ§ - ÊûÑÂª∫ËÑöÊú¨
 * Áî®‰∫é‰ºòÂåñÂíåÊûÑÂª∫ÈùôÊÄÅÁΩëÁ´ô
 */

const fs = require('fs');
const path = require('path');

class StaticSiteBuilder {
    constructor() {
        this.sourceDir = './';
        this.buildDir = './dist';
        this.requiredFiles = [
            'index.html',
            'style.css',
            'main.js',
            'wdwx.webp'
        ];
    }

    // ÂàõÂª∫ÊûÑÂª∫ÁõÆÂΩï
    createBuildDir() {
        if (!fs.existsSync(this.buildDir)) {
            fs.mkdirSync(this.buildDir, { recursive: true });
            console.log('‚úÖ ÂàõÂª∫ÊûÑÂª∫ÁõÆÂΩï:', this.buildDir);
        }
    }

    // Â§çÂà∂ÂøÖË¶ÅÊñá‰ª∂
    copyFiles() {
        console.log('üìÅ ÂºÄÂßãÂ§çÂà∂Êñá‰ª∂...');
        
        this.requiredFiles.forEach(file => {
            const sourcePath = path.join(this.sourceDir, file);
            const destPath = path.join(this.buildDir, file);
            
            if (fs.existsSync(sourcePath)) {
                fs.copyFileSync(sourcePath, destPath);
                console.log(`‚úÖ Â§çÂà∂Êñá‰ª∂: ${file}`);
            } else {
                console.warn(`‚ö†Ô∏è  Êñá‰ª∂‰∏çÂ≠òÂú®: ${file}`);
            }
        });
    }

    // ‰ºòÂåñHTMLÊñá‰ª∂
    optimizeHTML() {
        const htmlPath = path.join(this.buildDir, 'index.html');
        
        if (fs.existsSync(htmlPath)) {
            let html = fs.readFileSync(htmlPath, 'utf8');
            
            // Ê∑ªÂä†ÊûÑÂª∫Êó∂Èó¥Êà≥
            const timestamp = new Date().toISOString();
            html = html.replace(
                '<meta name="theme-color" content="#00D4FF">',
                `<meta name="theme-color" content="#00D4FF">
    <meta name="build-time" content="${timestamp}">`
            );
            
            // ÂéãÁº©HTMLÔºàÁßªÈô§Â§ö‰ΩôÁ©∫ÁôΩÔºâ
            html = html.replace(/\s+/g, ' ').replace(/>\s+</g, '><');
            
            fs.writeFileSync(htmlPath, html);
            console.log('‚úÖ HTMLÊñá‰ª∂Â∑≤‰ºòÂåñ');
        }
    }

    // ‰ºòÂåñCSSÊñá‰ª∂
    optimizeCSS() {
        const cssPath = path.join(this.buildDir, 'style.css');
        
        if (fs.existsSync(cssPath)) {
            let css = fs.readFileSync(cssPath, 'utf8');
            
            // ÁßªÈô§Ê≥®ÈáäÂíåÂ§ö‰ΩôÁ©∫ÁôΩ
            css = css.replace(/\/\*[\s\S]*?\*\//g, '');
            css = css.replace(/\s+/g, ' ');
            css = css.replace(/;\s*}/g, '}');
            css = css.replace(/\s*{\s*/g, '{');
            css = css.replace(/;\s*/g, ';');
            
            fs.writeFileSync(cssPath, css);
            console.log('‚úÖ CSSÊñá‰ª∂Â∑≤‰ºòÂåñ');
        }
    }

    // ÂàõÂª∫ÈÉ®ÁΩ≤ÈÖçÁΩÆ
    createDeployConfig() {
        const deployConfig = {
            name: "‰∫ë‰∫ëÊòüÁæΩÁΩëÁªúÁßëÊäÄÂ∑•‰ΩúÂÆ§",
            description: "ÁÆÄÁ∫¶ÁßëÊäÄÈ£éÂÆòÁΩë",
            buildTime: new Date().toISOString(),
            version: "1.0.0",
            files: this.requiredFiles,
            environment: {
                NODE_ENV: "production",
                SITE_URL: "https://starssr.com"
            }
        };

        fs.writeFileSync(
            path.join(this.buildDir, 'deploy-config.json'),
            JSON.stringify(deployConfig, null, 2)
        );
        console.log('‚úÖ ÈÉ®ÁΩ≤ÈÖçÁΩÆÂ∑≤ÂàõÂª∫');
    }

    // ÁîüÊàêÊñá‰ª∂Ê∏ÖÂçï
    generateManifest() {
        const manifest = {
            name: "‰∫ë‰∫ëÊòüÁæΩÁΩëÁªúÁßëÊäÄÂ∑•‰ΩúÂÆ§",
            short_name: "‰∫ë‰∫ëÊòüÁæΩ",
            description: "‰∏ì‰∏öÊèê‰æõÁΩëÁªúÊäÄÊúØÊúçÂä°„ÄÅËΩØ‰ª∂ÂºÄÂèë„ÄÅ‰∫∫Â∑•Êô∫ËÉΩËß£ÂÜ≥ÊñπÊ°à",
            start_url: "/",
            display: "standalone",
            background_color: "#0f172a",
            theme_color: "#00D4FF",
            icons: [
                {
                    src: "https://q1.qlogo.cn/g?b=qq&nk=521001121&s=192",
                    sizes: "192x192",
                    type: "image/png"
                },
                {
                    src: "https://q1.qlogo.cn/g?b=qq&nk=521001121&s=512",
                    sizes: "512x512",
                    type: "image/png"
                }
            ]
        };

        fs.writeFileSync(
            path.join(this.buildDir, 'manifest.json'),
            JSON.stringify(manifest, null, 2)
        );
        console.log('‚úÖ PWAÊ∏ÖÂçïÂ∑≤ÁîüÊàê');
    }

    // ÊâßË°åÊûÑÂª∫
    build() {
        console.log('üöÄ ÂºÄÂßãÊûÑÂª∫‰∫ë‰∫ëÊòüÁæΩÁΩëÁªúÁßëÊäÄÂ∑•‰ΩúÂÆ§ÂÆòÁΩë...\n');
        
        try {
            this.createBuildDir();
            this.copyFiles();
            this.optimizeHTML();
            this.optimizeCSS();
            this.createDeployConfig();
            this.generateManifest();
            
            console.log('\nüéâ ÊûÑÂª∫ÂÆåÊàêÔºÅ');
            console.log(`üì¶ ÊûÑÂª∫Êñá‰ª∂‰Ωç‰∫é: ${this.buildDir}`);
            console.log('üåê ÂèØ‰ª•ÈÉ®ÁΩ≤Âà∞‰ªª‰ΩïÈùôÊÄÅÁΩëÁ´ôÊâòÁÆ°ÊúçÂä°');
            
        } catch (error) {
            console.error('‚ùå ÊûÑÂª∫Â§±Ë¥•:', error.message);
            process.exit(1);
        }
    }
}

// ÊâßË°åÊûÑÂª∫
const builder = new StaticSiteBuilder();
builder.build();